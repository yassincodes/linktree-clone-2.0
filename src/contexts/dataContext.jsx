import React, {useState, useEffect, useContext} from "react"
import { authContext } from "./authContext"
import firebase from "../firebase/firebase"

const dataContext = React.createContext()

function DataContextProvider({children}) {
  
  const { uid } = useContext(authContext)

  // getting the data that we have stored in the step before
  const [dataCenter, setDataCenter] = useState();
    useEffect(() => {
      localStorage.getItem("this_uid") 
      && firebase
      .database()
      .ref(localStorage.getItem("this_uid")).on('value', (snapshot) => {
        const snapshotVal = snapshot.val();
        const dataCenter = [];
        for (let id in snapshotVal) {
          dataCenter.push({ id, ...snapshotVal[id] });
        }
        setDataCenter(dataCenter);
      })
  }, [uid]);


  // getting appData ( contains all the data generated by your users who use the app )
  const [appData, setappData] = useState()
  useEffect(() => {
     localStorage.getItem('this_uid') 
     && dataCenter
     && (dataCenter.length === 2)
     && firebase.database().ref(dataCenter[1].username).on('value', (snapshot) => {
       const snapshotVal = snapshot.val();
       const appData = [];
       for (let id in snapshotVal) {
         appData.push({ id, ...snapshotVal[id] }) 
       }
       setappData(appData)
      });
   }, [dataCenter && dataCenter.length])


  //////// crazyyyyyyyyy

  // getting the list of all usernames
  const [usernames, setUsernames] = useState()
  useEffect(() => {
    firebase
    .database()
    .ref("usernames").on('value', (snapshot) => {
      const snapshotVal = snapshot.val();
      const usernames = [];
      for (let id in snapshotVal) {
        usernames.push({ id, ...snapshotVal[id] });
      }
      setUsernames(usernames);
    });
  }, []);
    
  // getting all the usernames of your webnosite //
  const theUsernames = []
  usernames && usernames.map((user) => {
    theUsernames.push(user.username)
  })

return (
    <dataContext.Provider value={{dataCenter, appData, usernames, theUsernames}}>
        {children}
    </dataContext.Provider>
)
}

export {DataContextProvider, dataContext}